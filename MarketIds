from betfair.api_ng import API
import  json



#Login details

username='PUTUSERNAMEHERE'
url = 'https://identitysso.betfair.com/api/certlogin'
Appkey = 'PUTAPPKEYHERE'
data='username=USERNAME&password=PASSWORD'
import requests


#Datetime library to ensure we're only loading today's matches

from datetime import datetime, timedelta
tomorrow = datetime.now().date() + timedelta(days=1)
today = datetime.now().date()

print(tomorrow)


#Excel Session for todays matches
from openpyxl import Workbook
wb = Workbook()



NewSession = API(aus='False',username=username,use_ssl_cert='True',locale='')
NewSession.load_ssl_cert_paths(username=username)
print(NewSession.cert_paths)
NewSession.send_http_request(url,data=data)

headers = {
    'Accept': 'application/json',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': str(len(data)),
    'X-Authentication': NewSession.session_token,
    'Connection': 'Keep-Alive',
    'Accept-Encoding': 'gzip',
}

headers['X-Application']=Appkey

resp = NewSession.requests.post(url, data= data, cert = NewSession.cert_paths,headers = headers)

print(NewSession.session_token)
if resp.status_code==200:

    print(resp.json())


#Get account funds
account_url = "https://api.betfair.com/exchange/account/json-rpc/v1/"
req = '{"jsonrpc": "2.0", "method": "AccountAPING/v1.0/getAccountFunds"}'
response = requests.post(account_url, data=req, headers=headers)
accountFunds = response.json()
print(accountFunds)


#Get today's games market ids
event_url = "https://api.betfair.com/exchange/betting/json-rpc/v1"
req = '{"jsonrpc": "2.0", "method": "SportsAPING/v1.0/listEvents", "params": {"filter":{"eventTypeIds":["1"]},"marketStartTime":{"from":"2016-06-13T00:30:00Z","to":"2016-06-13T22:30:00Z"}}, "id": 1}'
response = requests.get(event_url, data=req, headers=headers)
Games = []

Games = response.json()

#Getting usable list from the Json response
print('1')
print(Games)
results = Games['result']
print("2")
print(results)
liquidResults = []
for idx, val in enumerate(results):
    #print(idx, val)
    if val['marketCount']>10:
        liquidResults.append(val['event'])

#liquidIds returns just the list of eventIds with a marketCount > 10 that are occuring today
liquidIds = []
matches = []
for idx, val in enumerate(liquidResults):
    if datetime.strptime(val['openDate'][:10], "%Y-%m-%d").date() < tomorrow:
   # if datetime.strptime(val['openDate'], '%Y-%b-%d') < tomorrow:
        liquidIds.append(val['id'])
        matches.append(val['name'])

print('3')
print(liquidIds)
print('4')
print(matches)

#Calculate number of "Liquid Games" today
number_of_games = len(liquidIds)


#i is the iterable indicating which position of the liquid games we are in
i=-1
#j is the games with valid, liquid Over/Under markets
j=-1


#Get correct MarketIds for Over/Under x goals for today's games by calling all markets (eg team a wins by 1, over/under 2.5 goals, draw etc.)
for x in liquidIds:
    i=i+1
    matchname=matches[i]
    event_url = "https://api.betfair.com/exchange/betting/json-rpc/v1"
    req = '{"jsonrpc": "2.0", "method": "SportsAPING/v1.0/listMarketCatalogue", "params": {"filter":{"eventIds":["' + x + '"] }, "maxResults":"20"}, "id":1}'
    response = requests.get(event_url, data=req, headers=headers)
    MarketIds = []
    MarketIds = response.json()
    marketnames1 = (MarketIds['result'])

    #create lists for the variables we need

    activemarketId = []
    activeMarkets=[]
    activetotal=[]


    #totalMatched = x['totalMatched']
    # k is the number of available, liquid of Over/Under markets in a single match

    k=-1
    for x in marketnames1:

        marketid = x['marketId']
        market = x['marketName']
        totalMatched = x['totalMatched']

        #populate lists with valid markets

        if market[:3] == 'Ove' and totalMatched>100:
            k = k+1
            activemarketId.append(marketid)
            activeMarkets.append(market)
            activetotal.append(totalMatched)

    #Add the game to a new sheet in the workbook we are building with today's matches

    if activemarketId != []:
        j = j+1
        print(i)
        print(matchname)
        print(activemarketId)
        print(activeMarkets)
        print(activetotal)

        #Create worksheet and call it the match number
        ws = wb.create_sheet()
        ws.title = 'match_number'+str(j)

        #Create headers for the columns and add the matchname into cell a2
        ws.cell(row = 1, column= 1).value = 'Match Name'
        ws.cell(row = 1, column= 2).value = 'Market Name'
        ws.cell(row = 1, column= 3).value = 'Market Id'
        ws.cell(row = 1, column= 4).value = 'Total Matched'
        ws.cell(row=2,column = 1).value = matchname

        #Paste all the values in each list into the correct column in the worksheet
        r=1
        for x in activeMarkets:
            r=r+1
            ws.cell(row=r,column=2).value = x

        r = 1
        for x in activemarketId:
            r = r + 1
            ws.cell(row=r, column=3).value = x

        r = 1
        for x in activetotal:
            r = r + 1
            ws.cell(row=r, column=4).value = x


#Save the workbook with today's date. I am saving it in a folder I have named "Daily data". Amend the path to your correct folder

StringDate = today.strftime('%d%m%Y')
Workbookname = '/Users/Josh/PycharmProjects/PGT_v3/DailyData/MarketIds@'+ StringDate+'.xlsx'
wb.save(filename=Workbookname)



